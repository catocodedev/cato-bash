#!/bin/bash
filename="$1"
option1="$2"
if [[ $filename == "" ]]; then
  read filename
fi
if [[ $option1 == "-debug" ]]; then
  debug=$"true"
else
  debug=$"false"
fi
if [[ $option1 == "-min" ]]; then
  mode=$"min"
else
  mode=$"reg"
fi
declare -a lines
declare -a colors
declare -a catoponents
declare -a catos
declare -a kitname
declare -a kitdata
# add colors!
syscolor=$"\e[1;36m"
colors+=("\e[0m"); #1 or default
colors+=("\e[0;30m"); #2 or black
colors+=("\e[0;31m"); #2 or red
colors+=("\e[0;33m"); #3 or yellow
colors+=("\e[0;32m"); #4 or green
colors+=("\e[0;32m"); #5 or purple
colors+=("\e[0;34m"); #6 or blue
declare -i color
color=$"1"
version=$"Dev0.1.2"
sed -i "s/^Version:.*/Version: $version/" ./catoponents/project.catofig
CONPON=./catoponents/catoponents.catofig
PROG=./catoponents/project.catofig
if [ -d "./catoponents" ]; then
if [ -f "$CONPON" ]; then
    tmp=`sed -n '3p' $PROG`
    mainkit=`grep -oP '(?<=:).*?(?=>)' <<< "$tmp"`
    timestamp=`date`
    echo "project prepared @ $timestamp" >> ./catoponents/log.catd
else 
    error=$"Catoponet file not found!";
    timestamp=`date`
    echo "project failed @ $timestamp Reason: $error" >> ./catoponents/log.catd
    echo $error
fi
else
  if ./pur; then
    ./pur init $filename $version
  else
    echo "INSTALL PUR! *pur not found"
    exit;
  fi
fi
error=$"No errors code executed!";
if [[ $filename == *".cato"* ]]; then
  mkdir ./catoponents/runtime
if test -f "$filename"; then
  if [[ $mode == "reg" ]]; then
      echo -e "${syscolor}Preparing $filename . . ."
      echo "Runnig CatoScript version $version" >> ./catoponents/runtime/debuglog.catd
      echo "Preping $filename for runtime" >> ./catoponents/runtime/debuglog.catd
    fi
    while IFS= read -r line
    do
      lines+=("$line");
    done < "$filename";
    lines+=("$line");
    foo=0
    len=${#lines[@]}
    while [ $foo != $len ]; do
      if [[ ${lines[$foo]} == *"@kitten"* ]]; then
        kitten=`grep -oP '(?<=<).*?(?=>)' <<< "${lines[$foo]}"`
        foo=$(( $foo + 1 ))
        while [[ ${lines[$foo]} != *"}"* ]]; do
          echo "${lines[$foo]}" >> ./catoponents/runtime/$kitten.catokit
          foo=$(( $foo + 1 ))
        done
        echo "Class $kitten created" >> ./catoponents/runtime/debuglog.catd
      fi
      if [[ ${lines[$foo]} == *"@import"* ]]; then
      import=`grep -oP '(?<={).*?(?=})' <<< "${lines[$foo]}"`
      catoponents+=("$import");
      fi
      if [[ ${lines[$foo]} == *"@kit"* ]]; then
      name=`grep -oP '(?<={).*?(?=,)' <<< "${lines[$foo]}"`
      data=`grep -oP '(?<=,").*?(?="})' <<< "${lines[$foo]}"`
      kitname+=("$name");
      kitdata+=("$data");
      fi
      foo=$(( $foo + 1 ))
    done
  else
    error=$"${syscolor}This file doesn't exsit"
    timestamp=`date`
    echo "project failed @ $timestamp Reason: $error" >> ./catoponents/log.catd
    echo -e "${syscolor}$error"
    sleep 2
    exit;  
  fi
  else
   error=$"${syscolor}This file is not a cato script file"
    echo -e "${syscolor}$error"
    sleep 2
    exit; 
fi

echo -e "${syscolor}Running $filename"
#code to interput the cato file
while IFS= read -r line
    do
      catlines+=("$line");
    done < "./catoponents/runtime/$mainkit.catokit";
    catlines+=("$line");
    acvlines=${#catlines[@]}
    declare -i ll
    ll=`expr $acvlines+1`
    foo=0
if [ -f './catoponents/runtime/$mainkit.catokit' ]; then
  timestamp=`date`
  echo "Project Failed @ $timestamp Reason:ERROR-100 Main class $mainkit not found" >> ./catoponents/log.catd
  echo -e "${colors[2]} ERROR-100! check logs"
  rm -r ./catoponents/runtime
  exit;
fi
foo=-1
ranstat=none
    len=`expr ${#catoponents[@]}`
    for (( i=0; i<$len; i++ ));
    do
    len=`expr ${#catoponents[@]}`
    tmp="./catoponents/catos/${catoponents[$i]}.catop"
    if [ -f $tmp ]; then
    echo "${catoponents[$i]} imported!" >> ./catoponents/log.catd
    else
    echo -e "${colors[2]}ERROR 201! check logs"
    timestamp=`date`
    echo "Project Failed @ $timestamp Reason:ERROR-201 import ${catoponents[$i]} failed not found" >> ./catoponents/log.catd
    rm -r ./catoponents/runtime
    exit;    
    fi
    done
while [[ $foo != $acvlines ]]; do

    len=${#catoponents[@]}
    for (( i=0; i<$len; i++ ));
    do
        source "./catoponents/catos/${catoponents[$i]}.catop"
    done
  if [[ ${catlines[$foo]} == *"%"* || ${catlines[$foo]} == "" ]]; then
    echo "Commented line / blank line" >> ./catoponents/runtime/debuglog.catd
    ranstat=ok
  elif [[ ${catlines[$foo]} == *"console.write"* ]]; then
    tmp=$(echo ${catlines[$foo]} | cut -d'"' -f 2)
    echo $tmp
    echo "Wrote $tmp to console" >> ./catoponents/runtime/debuglog.catd
    ranstat=ok
    elif [[ ${catlines[$foo]} == *"console.printkit"* ]]; then
    kit=`grep -oP '(?<=<).*?(?=>)' <<< "${catlines[$foo]}"`
    index=-1
    for i in "${!kitname[@]}";
      do
      if [[ "${kitname[$i]}" = "${kit}" ]];
      then
        index=$i
        break
      fi
    done
    kitval=${kitdata[$index]}
    echo $kitval
    echo "Kit printed $kit" >> ./catoponents/runtime/debuglog.catd
    ranstat=ok
    elif [[ ${catlines[$foo]} == *"kit.set$"* ]]; then
    kit=`grep -oP '(?<=<).*?(?=>)' <<< "${catlines[$foo]}"`
    val=`grep -oP '(?<=").*?(?=")' <<< "${catlines[$foo]}"`
    index=-1
    for i in "${!kitname[@]}";
      do
      if [[ "${kitname[$i]}" = "${kit}" ]];
      then
        index=$i
        break
      fi
    done
    kitdata[$index]="$val"
    echo "Kit $kit cahnged to $val" >> ./catoponents/runtime/debuglog.catd
    ranstat=ok
  elif [[ ${catlines[$foo]} == *"log.write"* ]]; then
    tmp=$(echo ${catlines[$foo]} | cut -d'"' -f 2)
    echo "$filename | $tmp" >> ./catoponents/log.catd
    ranstat=ok
   elif [[ ${catlines[$foo]} == *"kit.readset"* ]]; then
    echo "input"
    kit=`grep -oP '(?<=<).*?(?=>)' <<< "${catlines[$foo]}"`
    read val
    index=-1
    for i in "${!kitname[@]}";
      do
      if [[ "${kitname[$i]}" = "${kit}" ]];
      then
        index=$i
        break
      fi
    done
    kitdata[$index]="$val"
    echo "Kit $kit cahnged to $val" >> ./catoponents/runtime/debuglog.catd
    ranstat=ok
  elif [[ ${catlines[$foo]} == *"kitten$"* ]]; then
    kitten=`grep -oP '(?<=<).*?(?=>)' <<< "${catlines[$foo]}"`
    if [ -f "./catoponents/runtime/$kitten.catokit" ]; then
    tmp=0
    while IFS= read -r line
    do
      tmplines+=("$line")
    done < "./catoponents/runtime/$kitten.catokit";
    tmplines+=("$line")
    barfoo=$(( $foo  + 1 ))
    catlines=(${catlines[@]::$foo} ${tmplines[@]} ${catlines[@]:$barfoo:$len})
    ranstat=ok
    else
    echo "Project Failed @ $timestamp Reason:ERROR-400 class $kitten not found on line $foo inside the main class | ${catlines[$foo]}" >> ./catoponents/log.catd
    echo -e "${colors[2]} ERROR-400! check logs"
    rm -r ./catoponents/runtime
    exit;
    fi
  fi
  foo=$(( $foo + 1 ))
  if [ $ranstat != "ok" ]; then
  if [ $ranstat != "error" ]; then
   
    echo "Project Failed @ $timestamp Reason:ERROR-101 invaild method on line $foo inside the main class| ${catlines[$foo]}" >> ./catoponents/log.catd
    echo "Run Status $ranstat" >> ./catoponents/log.catd
    echo -e "${colors[2]} ERROR-101! check logs"
    rm -r ./catoponents/runtime
    exit;
  else
  echo "Project Failed @ $timestamp Reason:ERROR-300 function error on line $foo inside the main class| ${catlines[$foo]}" >> ./catoponents/log.catd
  echo "$error" >> ./catoponents/log.catd
  fi
  fi
  runstat=null
done
#end code
if [[ $debug == "true" ]]; then
  echo -e "${syscolor}$error"
  echo -e "${syscolor}$filename has finshed running!"
  timestamp=`date`
  echo "debug log for $timestamp | $dblog" >> ./catoponents/log.catd
  echo "$foo lines ran" >> ./catoponents/log.catd
 while IFS= read -r line
    do
      echo "$line" >> ./catoponents/log.catd
    done < "./catoponents/runtime/debuglog.catd";
     echo -e "${syscolor}Debug Log saved to log file"
else
  error="${syscolor}$error | Invaild debug vaule set"
fi
if [[ $mode == "reg" ]]; then
  echo -e "${syscolor}press enter to end cato session!"
  read foo
fi
timestamp=`date`
echo "project ran @ $timestamp using CatoScript:$version" >> ./catoponents/log.catd
rm -r ./catoponents/runtime